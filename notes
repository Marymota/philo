After a long while, thanks to some great help
I was able to figure out what the problems were

All my program run well exept when the first thread taken was 
philo->2 instead of philo->1, at that point my philo one would die
and then keep running for a long while what was obvious not normal.

After that It was called to my attention that just philo one died
all the time.
For some strange reason I thought that was perfectly normal...
After a printf in the death() function it was visible that only philo->id 1 
was entering that function.
So I had to arrange the monitor function that until that point was only
observing one.. but declare death as soon as sim->die turn to 1;

After that the time of death keep being printed 1ms after other actions
were taken and the problem was that I was printing
"current time - philo->time of last meal", the formula I use to
compare if is more than "time o die".
The one I should be printing is "current time - time of start";

After that everything seems to be OK XP

- ThreadSanitizer: lock-order-inversion (potential deadlock) src/simulation.c:52 in get_forks
The program seems to work as it should but this error ocurred using the ThreadSanitizer,
I have read that this happens when multiple threads try to get two resourses in the same order.
so to avoid it I alterned the order odd and even philosophers get the forks to avoid being
stopped in a mutex for a long time.
I don't know why this solves the problem.. but it does..

Later I tried to just start actions 1 ms later for even philos.
Not sure what I did that now they will not die when they should if I don't use that bit.
